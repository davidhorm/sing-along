{"version":3,"sources":["components/Directory.tsx","hooks/useFetch.tsx","hooks/useYouTube.tsx","components/Karaoke.tsx","hooks/useDimensions.tsx","components/SyncLyrics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Directory","songList","setSelectedSong","className","sort","a","b","lyricsFileName","localeCompare","map","songMetadata","replace","split","songTitle","artist","youtubeThumbnailSrc","videoId","onClick","src","alt","cc","useFetch","url","React","useState","data","setData","useEffect","fetch","then","response","text","result","fetchData","useYouTube","divId","videoWidth","videoHeight","milliseconds","setMilliseconds","timer","player","YouTubePlayer","playerVars","cc_load_policy","setSize","loadVideoById","startTimer","getCurrentTime","seconds","setInterval","value","stopTimer","clearInterval","listener","on","event","window","YT","PlayerState","PLAYING","PAUSED","ENDED","off","destroy","Karaoke","selectedSong","clientHeight","document","getElementsByTagName","dimensions","video","height","width","caption","useDimensions","lrcData","lineRenderer","useCallback","lrcLine","active","content","id","lrc","currentTime","style","spaceTop","SyncLyrics","lyricLines","setLyricLines","youTubeTime","display","onChange","e","target","current","array","filter","_","index","length","paddingLeft","maxHeight","overflow","lyric","timestamp","Date","toISOString","substring","App","JSON","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wQASaA,EAAY,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,gBACjC,OAAQ,qCACJ,wJACA,yBAASC,UAAU,YAAnB,SACKF,EACIG,MAAK,SAACC,EAAiBC,GAAlB,OAAsCD,EAAEE,eAAeC,cAAcF,EAAEC,mBAC5EE,KAAI,SAACC,GAAgC,IAAD,EACLA,EAAaH,eAAeI,QAAQ,OAAQ,IAAIC,MAAM,OADjD,mBAC1BC,EAD0B,KACfC,EADe,KAE3BC,EAAmB,qCAAiCL,EAAaM,QAA9C,kBAEzB,OAAO,yBAAmCC,QAAS,kBAAMf,EAAgBQ,IAAlE,UACH,qBAAKQ,IAAKH,EAAqBI,IAAG,+BAA0BN,KAC5D,gCACKA,EADL,IACgB,uBADhB,IACwBC,EACnBJ,EAAaU,IAAM,cAAC,IAAD,CAA2BjB,UAAU,iBAJ7CO,EAAaM,kB,+BCjBxCK,EAAW,SAACC,GAAiB,IAAD,EACbC,IAAMC,SAAS,IADF,mBAC9BC,EAD8B,KACxBC,EADwB,KAYrC,OATAH,IAAMI,WAAU,YACG,uCAAG,sBAAAtB,EAAA,+EACduB,MAAMN,GACDO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIN,EAAQM,OAHd,2CAAH,qDAKfC,KACD,CAACX,IAEG,CAAEG,S,iBCLAS,EAAa,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,MAAOnB,EAAuD,EAAvDA,QAASoB,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,YAAkC,EAC9Cd,IAAMC,SAAS,GAD+B,mBAC/Ec,EAD+E,KACjEC,EADiE,KA8CtF,OA3CAhB,IAAMI,WAAU,WACZ,IAQIa,EAREC,EAASC,IAAcP,GAASnB,EAAS,CAC3C2B,WAAY,CACRC,eAAgB,KAGxBR,GAAcC,GAAeI,EAAOI,QAAST,EAAYC,GACzDI,EAAOK,cAAc9B,GAGrB,IAAM+B,EAAU,uCAAG,4BAAA1C,EAAA,sEACOoC,EAAOO,iBADd,OACTC,EADS,OAEfV,EAA0B,IAAVU,GACE,IAClBT,EAAQU,aAAY,WAChBX,GAAgB,SAAAY,GAAK,OAAIA,EAFX,cAHH,2CAAH,qDASVC,EAAY,kBAAMC,cAAcb,IAehCc,EAAWb,EAAOc,GAAG,eAbD,SAACC,GAAgB,IAAD,EACFC,OAAeC,GAAGC,YAA9CC,EAD8B,EAC9BA,QAASC,EADqB,EACrBA,OAAQC,EADa,EACbA,MACzB,OAAQN,EAAM/B,MACV,KAAKmC,EACDb,IACA,MACJ,KAAKc,EACL,KAAKC,EACDV,QAOZ,OAAO,WACHA,IACCX,EAAesB,IAAIT,GACpBb,EAAOuB,aAEZ,CAAC7B,EAAOnB,EAASoB,EAAYC,IAEzB,CAAEC,iBC5CA2B,G,MAAU,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,aAAchE,EAAmC,EAAnCA,gBAAmC,ECX7C,WAEzB,IAAMiE,EAAeC,SAASC,qBAAqB,QAAQ,GAAGF,aAExD9B,EADmB,GACL8B,EAYpB,MAAO,CAAEG,WAVU,CACfC,MAAO,CACHC,OAAQnC,EACRoC,MAAOpC,EAAc,EAAI,IAE7BqC,QAAS,CACLF,OAAQL,GAAgB,EATP,ODciBQ,GAAlCL,WAAcC,EANgD,EAMhDA,MAAOG,EANyC,EAMzCA,QAEfE,EAAYvD,EAAS,sBAAD,OAAuB6C,EAAa3D,iBAA9DkB,KAEAa,EAAiBJ,EAAW,CAChClB,QAASkD,EAAalD,QACtBoB,WAAYmC,EAAME,MAClBpC,YAAakC,EAAMC,SAHflC,aAMFuC,EAAetD,IAAMuD,aAAY,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAZ,OACnC,qBAAK7E,UAAY6E,EAAS,cAAgB,gBAA1C,SACKD,EAAQE,YAEf,IAEF,OACI,0BAAS9E,UAAU,UAAnB,UACI,wBAAQc,QAAS,kBAAMf,EAAgB,OAAvC,kBACA,qBAAKgF,GAAIhB,EAAalD,UACtB,cAAC,IAAD,CACIb,UAAU,MACVgF,IAAKP,GAAW,GAChBQ,YAAa9C,EACbuC,aAAcA,EACdQ,MAAO,CAAEb,OAAQE,EAAQF,QACzBc,SAAU,S,QErCbC,EAAa,SAAC,GAAkC,IAAhCvE,EAA+B,EAA/BA,QAA+B,EAClBO,IAAMC,SAAmB,IADP,mBAChDgE,EADgD,KACpCC,EADoC,OAEdlE,IAAMC,SAAmB,IAFX,mBAEhDc,EAFgD,KAElCC,EAFkC,KAGlCmD,EAAgBxD,EAAW,CAAClB,YAA1CsB,aAER,OACI,0BAASnC,UAAU,cAAckF,MAAO,CAACM,QAAS,QAAlD,UACI,gCACI,qBAAKT,GAAIlE,IAAe,uBACxB,0BAAU4E,SAAU,SAAAC,GAAC,OAAIJ,EAAcI,EAAEC,OAAO3C,MAAMvC,MAAM,UAAmB,uBAC/E,wBAAQK,QAAS,kBAAMsB,GAAiB,SAAAwD,GAAO,4BAASA,GAAT,CAAkBL,QAAjE,sBAAkG,uBAClG,wBAAQzE,QAAS,kBAAMsB,GAAiB,SAAAyD,GAAK,OAAIA,EAAMC,QAAO,SAACC,EAAGC,GAAJ,OAAcA,IAAU7D,EAAa8D,OAAS,SAA5G,qBAGJ,qBAAKf,MAAO,CAACgB,YAAa,MAAOC,UAAW,QAASC,SAAU,QAA/D,SACKf,EAAW/E,KAAI,SAAC+F,EAAOL,GACpB,IAAMM,EAAYnE,EAAa6D,GAAb,WAA0B,IAAIO,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGpE,EAAa6D,IAAQQ,cAAcC,UAAU,GAAI,IAAtG,MAAgH,GAClI,OAAO,gCAAkBH,EAAWD,IAAnBL,YCGtBU,EAjBH,WAAO,IAAD,EACwBtF,IAAMC,WAD9B,mBACT0C,EADS,KACKhE,EADL,KAERuB,EAASJ,EAAS,iCAAlBI,KACFxB,EAA2BwB,EAAOqF,KAAKC,MAAMtF,GAAQ,GAE3D,OACE,qBAAKtB,UAAU,MAAf,SACG+D,GAAgBA,EAAa3D,eAC1B,cAAC,EAAD,CAAS2D,aAAcA,EAAchE,gBAAiBA,IACtDgE,GAAgBA,EAAalD,QAC3B,cAAC,EAAD,CAAYA,QAASkD,EAAalD,UAClC,cAAC,EAAD,CAAWf,SAAUA,EAAUC,gBAAiBA,OCN7C8G,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrF,MAAK,YAAkD,IAA/CsF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASuD,eAAe,SAM1BX,M","file":"static/js/main.379beb79.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Directory.css';\r\nimport ClosedCaptionOutlinedIcon from '@material-ui/icons/ClosedCaptionOutlined';\r\nimport { SongMetadata } from '../App';\r\n\r\ntype DirectoryProps = {\r\n    songList: SongMetadata[];\r\n    setSelectedSong: Function;\r\n}\r\nexport const Directory = ({songList, setSelectedSong}: DirectoryProps) => {\r\n    return (<>\r\n        <h1>🎄🎅🤶🎵 Christmas Sing Along 🎶☃️🎁🎄</h1>\r\n        <section className=\"directory\">\r\n            {songList\r\n                .sort((a: SongMetadata, b: SongMetadata) => a.lyricsFileName.localeCompare(b.lyricsFileName))\r\n                .map((songMetadata: SongMetadata) => {\r\n                    const [songTitle, artist] = songMetadata.lyricsFileName.replace('.lrc', '').split(' - ');\r\n                    const youtubeThumbnailSrc = `https://img.youtube.com/vi/${songMetadata.videoId}/mqdefault.jpg`;\r\n\r\n                    return <button key={songMetadata.videoId} onClick={() => setSelectedSong(songMetadata)}>\r\n                        <img src={youtubeThumbnailSrc} alt={`Youtube Thumbnail of ${songTitle}`} />\r\n                        <div>\r\n                            {songTitle} <br /> {artist}\r\n                            {songMetadata.cc && <ClosedCaptionOutlinedIcon className=\"cc-icon\" />}\r\n                        </div>\r\n                    </button>\r\n                }\r\n            )}\r\n        </section>\r\n    </>);\r\n};","import React from 'react';\r\n\r\nexport const useFetch = (url: string) => {\r\n    const [data, setData] = React.useState('');\r\n\r\n    React.useEffect(() => {\r\n        const fetchData = async () => \r\n            fetch(url)\r\n                .then(response => response.text())\r\n                .then(result => setData(result));\r\n\r\n        fetchData();\r\n    }, [url]);\r\n\r\n    return { data };\r\n};","import React from 'react';\r\nimport YouTubePlayer from 'youtube-player';\r\n\r\ntype useYouTubeProps = {\r\n    divId?: string;\r\n    videoId: string;\r\n    videoWidth?: number;\r\n    videoHeight?: number;\r\n}\r\nexport const useYouTube = ({divId, videoId, videoWidth, videoHeight}: useYouTubeProps) => {\r\n    const [milliseconds, setMilliseconds] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        const player = YouTubePlayer(divId || videoId, {\r\n            playerVars: {\r\n                cc_load_policy: 1 // show closed captions\r\n            }\r\n        });\r\n        videoWidth && videoHeight && player.setSize( videoWidth, videoHeight );\r\n        player.loadVideoById(videoId);\r\n\r\n        let timer: ReturnType<typeof setInterval>;\r\n        const startTimer = async () => {\r\n            const seconds = await player.getCurrentTime();\r\n            setMilliseconds(seconds * 1000);\r\n            const increment = 100; // ms // EXTRA CREDIT: adjust interval based on `player.getPlaybackRate()`.\r\n            timer = setInterval(() => {\r\n                setMilliseconds(value => value + increment)\r\n            }, increment);\r\n        };\r\n\r\n        const stopTimer = () => clearInterval(timer);\r\n\r\n        const handleStateChange = (event: any) => {\r\n            const { PLAYING, PAUSED, ENDED } = (window as any).YT.PlayerState;\r\n            switch (event.data) {\r\n                case PLAYING:\r\n                    startTimer();\r\n                    break;\r\n                case PAUSED:\r\n                case ENDED:\r\n                    stopTimer();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const listener = player.on('stateChange', handleStateChange);\r\n\r\n        return () => {\r\n            stopTimer();\r\n            (player as any).off(listener);\r\n            player.destroy();\r\n        };\r\n    }, [divId, videoId, videoWidth, videoHeight]);\r\n\r\n    return { milliseconds };\r\n}","import React from \"react\";\r\nimport { Lrc, LrcLine } from \"@mebtte/react-lrc\";\r\nimport { useDimensions, useFetch, useYouTube } from '../hooks';\r\nimport './Karaoke.css';\r\nimport { SongMetadata } from \"../App\";\r\n\r\ntype KaraokeProps = {\r\n    selectedSong: SongMetadata;\r\n    setSelectedSong: Function;\r\n}\r\n\r\nexport const Karaoke = ({selectedSong, setSelectedSong}: KaraokeProps) => {\r\n    interface ILrcLine {\r\n        lrcLine: LrcLine;\r\n        index: number;\r\n        active: boolean\r\n    }\r\n    const { dimensions: { video, caption }} = useDimensions();\r\n\r\n    const { data: lrcData } = useFetch(`/sing-along/lyrics/${selectedSong.lyricsFileName}`);\r\n\r\n    const { milliseconds } = useYouTube({\r\n        videoId: selectedSong.videoId,\r\n        videoWidth: video.width,\r\n        videoHeight: video.height,\r\n    });\r\n\r\n    const lineRenderer = React.useCallback(({ lrcLine, active}: ILrcLine) => \r\n        <div className={ active ? 'active-line' : 'inactive-line' }>\r\n            {lrcLine.content}\r\n        </div>\r\n    , []);\r\n\r\n    return (\r\n        <section className=\"karaoke\">\r\n            <button onClick={() => setSelectedSong(null)}>Back</button>\r\n            <div id={selectedSong.videoId} />\r\n            <Lrc \r\n                className='lrc'\r\n                lrc={lrcData || ''}\r\n                currentTime={milliseconds}\r\n                lineRenderer={lineRenderer}\r\n                style={{ height: caption.height }}\r\n                spaceTop={0}\r\n            />\r\n        </section>\r\n    );\r\n}","export const useDimensions = () => {\r\n    // EXTRA CREDIT: get fancy with reading video size ratio\r\n    const clientHeight = document.getElementsByTagName('html')[0].clientHeight;\r\n    const videoHeightRatio = 0.8;\r\n    const videoHeight = clientHeight * videoHeightRatio;\r\n\r\n    const dimensions = {\r\n        video: {\r\n            height: videoHeight,\r\n            width: videoHeight / 9 * 16,\r\n        },\r\n        caption: {\r\n            height: clientHeight * (1 - videoHeightRatio)\r\n        }\r\n    }\r\n\r\n    return { dimensions };\r\n};","import React from 'react';\r\nimport { useYouTube } from '../hooks';\r\n\r\ntype SyncLyricsProps = {\r\n    videoId: string;\r\n}\r\nexport const SyncLyrics = ({ videoId }: SyncLyricsProps) => {\r\n    const [ lyricLines, setLyricLines ] = React.useState<string[]>([]);\r\n    const [ milliseconds, setMilliseconds ] = React.useState<number[]>([]);\r\n    const { milliseconds: youTubeTime } = useYouTube({videoId});\r\n\r\n    return (\r\n        <section className=\"sync-lyrics\" style={{display: 'flex'}}>\r\n            <div>\r\n                <div id={videoId}></div><br />\r\n                <textarea onChange={e => setLyricLines(e.target.value.split('\\n'))}></textarea><br />\r\n                <button onClick={() => setMilliseconds( current => [ ...current, youTubeTime ])}>SET TIME</button><br />\r\n                <button onClick={() => setMilliseconds( array => array.filter((_, index) => index !== milliseconds.length - 1))}>UNDO</button>\r\n            </div>\r\n            \r\n            <div style={{paddingLeft: '1em', maxHeight: '100vh', overflow: 'auto'}}>\r\n                {lyricLines.map((lyric, index) => {\r\n                    const timestamp = milliseconds[index] ? `[${new Date(0, 0, 0, 0, 0, 0, milliseconds[index]).toISOString().substring(14, 21)}] ` : '';\r\n                    return <div key={index}>{timestamp}{lyric}</div>\r\n                })}\r\n            </div>\r\n        </section>\r\n    );\r\n};","import React from \"react\";\r\nimport { Directory, Karaoke, SyncLyrics } from './components';\r\nimport { useFetch } from './hooks';\r\n\r\nexport type SongMetadata = {\r\n  videoId: string;\r\n  lyricsFileName: string;\r\n  cc?: boolean;\r\n}\r\nconst App = () => {\r\n  const [selectedSong, setSelectedSong] = React.useState<SongMetadata>();\r\n  const { data } = useFetch('/sing-along/lyrics/index.json');\r\n  const songList: SongMetadata[] = data ? JSON.parse(data) : [];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {selectedSong && selectedSong.lyricsFileName\r\n        ? <Karaoke selectedSong={selectedSong} setSelectedSong={setSelectedSong} />\r\n        : selectedSong && selectedSong.videoId\r\n          ? <SyncLyrics videoId={selectedSong.videoId} />\r\n          : <Directory songList={songList} setSelectedSong={setSelectedSong} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}