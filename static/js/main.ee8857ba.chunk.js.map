{"version":3,"sources":["components/Directory/ShuffleButton.tsx","components/Directory/Directory.tsx","hooks/useYouTube.tsx","components/Karaoke/Lyrics.tsx","components/Karaoke/Karaoke.tsx","components/KaraokeByShuffle/KaraokeByShuffle.tsx","components/KaraokeByVideoId/KaraokeByVideoId.tsx","components/SyncLyrics.tsx","App.tsx","hooks/useFetch.tsx","reportWebVitals.ts","index.tsx"],"names":["ShuffleButton","to","Button","size","variant","style","margin","endIcon","xmlns","width","height","viewBox","fill","d","useStyles","makeStyles","label","flexDirection","minWidth","card","maxWidth","cardMedia","cardTitle","fontSize","fontWeight","Directory","songList","classes","className","sort","a","b","songTitle","localeCompare","map","videoId","songArtist","cc","youtubeThumbnailSrc","youtubeThumbnailAlt","ifNeedsEditPath","Card","CardActionArea","CardMedia","component","alt","title","image","CardContent","Typography","gutterBottom","color","disableFullscreenOnIOS","includes","navigator","platform","userAgent","document","useYouTube","onVideoEnd","milliseconds","setMilliseconds","useState","useEffect","playerOptions","playerVars","cc_load_policy","iv_load_policy","playsinline","modestbranding","getYouTubePlayerOptions","player","YouTubePlayer","timer","loadVideoById","stopTimer","clearInterval","listener","on","event","PLAYING","PAUSED","ENDED","window","YT","PlayerState","data","async","seconds","getCurrentTime","setInterval","value","startTimer","off","destroy","Lyrics","lrcData","setLrcData","lyricUrl","fetch","then","response","text","lineRenderer","useCallback","lrcLine","active","content","lrc","currentTime","spaceTop","Karaoke","id","KaraokeByShuffle","shuffleIndex","useParams","randomIndex","parseInt","length","song","history","useHistory","replace","key","KaraokeByVideoId","selectedSong","filter","SyncLyrics","lyricLines","setLyricLines","youTubeTime","display","border","onChange","e","target","split","onClick","current","array","_","index","paddingLeft","maxHeight","overflow","lyric","timestamp","Date","toISOString","substring","darkTheme","createMuiTheme","palette","type","App","url","setData","result","fetchData","useFetch","JSON","parse","randomSongList","Math","random","ThemeProvider","theme","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ee8857ba.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\nexport const ShuffleButton = () => (\n  <Link to=\"/shuffle/0\">\n    <Button\n      size=\"large\"\n      variant=\"outlined\"\n      style={{ margin: '0.5rem' }}\n      endIcon={\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"currentColor\"\n            d=\"M17 17h-1.559l-9.7-10.673A1 1 0 0 0 5.001 6H2v2h2.559l4.09 4.5-4.09 4.501H2v2h3.001a1 1 0 0 0 .74-.327L10 13.987l4.259 4.686a1 1 0 0 0 .74.327H17v3l5-4-5-4v3z\"\n           />\n          <path\n            fill=\"currentColor\"\n            d=\"M15.441 8H17v3l5-3.938L17 3v3h-2.001a1 1 0 0 0-.74.327l-3.368 3.707 1.48 1.346L15.441 8z\"\n           />\n        </svg>\n      }\n    >\n      Shuffle Play\n    </Button>\n  </Link>\n);\n","import './Directory.css';\nimport ClosedCaptionOutlinedIcon from '@material-ui/icons/ClosedCaptionOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport type { MusicVideo } from '../../App';\nimport { ShuffleButton } from './ShuffleButton';\n\nconst useStyles = makeStyles({\n  label: {\n    flexDirection: 'column',\n    minWidth: '420px',\n  },\n  card: {\n    margin: 8,\n    maxWidth: 320,\n  },\n  cardMedia: {\n    height: 180,\n  },\n  cardTitle: {\n    fontSize: '1rem',\n    fontWeight: 500,\n  },\n});\n\ntype DirectoryProps = {\n  songList: MusicVideo[];\n};\nexport const Directory = ({ songList }: DirectoryProps) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <h1>🎄🎅🤶🎵 Christmas Sing Along 🎶☃️🎁🎄</h1>\n      <nav>\n        <ShuffleButton />\n      </nav>\n      <section className=\"directory\">\n        {songList\n          .sort((a: MusicVideo, b: MusicVideo) =>\n            a.songTitle.localeCompare(b.songTitle),\n          )\n          .map(({ videoId, songTitle, songArtist, cc }: MusicVideo) => {\n            const youtubeThumbnailSrc = `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;\n            const youtubeThumbnailAlt = `Youtube Thumbnail of ${songTitle}`;\n\n            const ifNeedsEditPath = songTitle && songArtist ? '' : '/edit';\n\n            return (\n              <Card className={classes.card} key={videoId}>\n                <Link to={`/${videoId}${ifNeedsEditPath}`}>\n                  <CardActionArea>\n                    <CardMedia\n                      className={classes.cardMedia}\n                      component=\"img\"\n                      alt={youtubeThumbnailAlt}\n                      title={youtubeThumbnailAlt}\n                      image={youtubeThumbnailSrc}\n                    />\n                    <CardContent>\n                      <Typography\n                        gutterBottom\n                        variant=\"h5\"\n                        component=\"h2\"\n                        className={classes.cardTitle}\n                      >\n                        {songTitle}\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        {songArtist}\n                        {cc && (\n                          <ClosedCaptionOutlinedIcon className=\"cc-icon\" />\n                        )}\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>\n                </Link>\n              </Card>\n            );\n          })}\n      </section>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport YouTubePlayer from 'youtube-player';\nimport type { Options } from 'youtube-player/dist/types';\n\nconst isIOS = () =>\n  [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform) ||\n  // iPad on iOS 13 detection\n  (navigator.userAgent.includes('Mac') && 'ontouchend' in document);\n\n/**\n *\n * @param cc\n * @returns 0 = enable fullscreen; 1 = disable fullscreen\n */\nconst disableFullscreenOnIOS = (cc: boolean) => !cc && isIOS() ? 1 : 0;\n\nconst getYouTubePlayerOptions = (cc: boolean): Options => ({\n  height: '100%',\n  width: '100%',\n  playerVars: {\n    cc_load_policy: 1, // show closed captions\n    iv_load_policy: 3, // remove video annotations\n    playsinline: disableFullscreenOnIOS(cc), // disable auto-fullscreen in iOS\n    modestbranding: 1, // remove YouTube icon in bottom corner\n  },\n});\n\nexport interface useYouTubeProps {\n  videoId: string;\n  cc?: boolean;\n  onVideoEnd?: Function;\n}\nexport const useYouTube = ({\n  videoId,\n  cc = false,\n  onVideoEnd,\n}: useYouTubeProps) => {\n  const [milliseconds, setMilliseconds] = useState(0);\n\n  useEffect(() => {\n    const playerOptions = getYouTubePlayerOptions(cc);\n    const player = YouTubePlayer(videoId, playerOptions);\n    player.loadVideoById(videoId);\n\n    let timer: ReturnType<typeof setInterval>;\n    const startTimer = async () => {\n      const seconds = await player.getCurrentTime();\n      setMilliseconds(seconds * 1000);\n      const increment = 100; // ms // EXTRA CREDIT: adjust interval based on `player.getPlaybackRate()`.\n      timer = setInterval(() => {\n        setMilliseconds((value) => value + increment);\n      }, increment);\n    };\n\n    const stopTimer = () => clearInterval(timer);\n\n    const handleStateChange = (event: any) => {\n      const { PLAYING, PAUSED, ENDED } = (window as any).YT.PlayerState;\n      switch (event.data) {\n        case PLAYING:\n          startTimer();\n          break;\n        case PAUSED:\n          stopTimer();\n          break;\n        case ENDED:\n          stopTimer();\n          if (onVideoEnd) onVideoEnd();\n          break;\n        default:\n          break;\n      }\n    };\n\n    const listener = player.on('stateChange', handleStateChange);\n\n    return () => {\n      stopTimer();\n      (player as any).off(listener);\n      player.destroy();\n    };\n  }, [videoId, cc, onVideoEnd]);\n\n  return { milliseconds };\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Lrc, LrcLine } from '@mebtte/react-lrc';\nimport type { MusicVideo } from '../../App';\nimport './Lyrics.css';\n\ninterface LyricsProps extends Omit<MusicVideo, 'videoId'> {\n  milliseconds: number;\n}\n\nexport const Lyrics = ({\n  milliseconds,\n  songTitle,\n  songArtist,\n  cc,\n}: LyricsProps) => {\n  const [lrcData, setLrcData] = useState('');\n  useEffect(() => {\n    const lyricUrl = !cc\n      ? `/sing-along/lyrics/${songTitle} - ${songArtist}.lrc`\n      : '';\n    fetch(lyricUrl)\n      .then((response) => response.text())\n      .then(setLrcData);\n  }, [songTitle, songArtist, cc]);\n\n  interface ILrcLine {\n    lrcLine: LrcLine;\n    index: number;\n    active: boolean;\n  }\n  const lineRenderer = useCallback(\n    ({ lrcLine, active }: ILrcLine) => (\n      <div className={active ? 'active-line' : 'inactive-line'}>\n        {lrcLine.content}\n      </div>\n    ),\n    [],\n  );\n\n  return (\n    <Lrc\n      className=\"lrc\"\n      lrc={!cc ? lrcData : '[00:00.0] [CC Available]'}\n      currentTime={milliseconds}\n      lineRenderer={lineRenderer}\n      spaceTop={0}\n    />\n  );\n};\n","import { useYouTube, useYouTubeProps } from '../../hooks/useYouTube';\nimport './Karaoke.css';\nimport { Lyrics } from './Lyrics';\nimport type { MusicVideo } from '../../App';\n\ninterface Props extends MusicVideo, Pick<useYouTubeProps, 'onVideoEnd'> { }\n\nexport const Karaoke = ({\n  videoId,\n  songTitle,\n  songArtist,\n  cc,\n  onVideoEnd,\n}: Props) => {\n  const { milliseconds } = useYouTube({\n    videoId,\n    cc,\n    onVideoEnd,\n  });\n\n  return (\n    <section className=\"karaoke\">\n      <div className=\"video\">\n        <div id={videoId} />\n      </div>\n      {!cc && (\n        <Lyrics\n          milliseconds={milliseconds}\n          songTitle={songTitle}\n          songArtist={songArtist}\n          cc={cc}\n        />\n      )}\n    </section>\n  );\n};\n","import { useHistory, useParams } from 'react-router-dom';\nimport type { MusicVideo } from '../../App';\nimport { Karaoke } from '../Karaoke/Karaoke';\n\ninterface KaraokeByShuffleProps {\n  songList: MusicVideo[];\n}\nexport const KaraokeByShuffle = ({ songList }: KaraokeByShuffleProps) => {\n  const { shuffleIndex } = useParams<any>();\n  const randomIndex = parseInt(shuffleIndex, 10) % songList.length;\n  const song = songList[randomIndex];\n\n  const history = useHistory();\n  const onVideoEnd = () => {\n    history.replace(`/shuffle/${randomIndex + 1}`);\n  };\n\n  return (\n    <Karaoke\n      {...song}\n      onVideoEnd={onVideoEnd}\n      key={shuffleIndex} // Rerender component to fix YouTube racing issue\n    />\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport type { MusicVideo } from '../../App';\nimport { Karaoke } from '../Karaoke/Karaoke';\n\ninterface KaraokeByVideoIdProps {\n  songList: MusicVideo[];\n}\nexport const KaraokeByVideoId = ({ songList }: KaraokeByVideoIdProps) => {\n  const { videoId } = useParams<any>();\n  const selectedSong = songList.filter((song) => song.videoId === videoId)[0] || {};\n\n  return <Karaoke {...selectedSong} />;\n};\n","import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { useYouTube } from '../hooks';\n\nexport const SyncLyrics = () => {\n  const [lyricLines, setLyricLines] = useState<string[]>([]);\n  const [milliseconds, setMilliseconds] = useState<number[]>([]);\n  const { videoId } = useParams<any>();\n  const { milliseconds: youTubeTime } = useYouTube({ videoId });\n\n  return (\n    <section className=\"sync-lyrics\" style={{ display: 'flex' }}>\n      <div>\n        <div id={videoId} />\n        <br />\n        <textarea\n          style={{ border: 'solid 1px gray', height: '35%', width: '100%' }}\n          onChange={(e) => setLyricLines(e.target.value.split('\\n'))}\n        />\n        <br />\n        <Button\n          variant=\"outlined\"\n          onClick={() =>\n            setMilliseconds((current) => [...current, youTubeTime])\n          }\n        >\n          SET TIME\n        </Button>\n        <br />\n        <Button\n          variant=\"outlined\"\n          onClick={() =>\n            setMilliseconds((array) =>\n              array.filter((_, index) => index !== milliseconds.length - 1),\n            )\n          }\n        >\n          UNDO\n        </Button>\n      </div>\n\n      <div style={{ paddingLeft: '1em', maxHeight: '100vh', overflow: 'auto' }}>\n        {lyricLines.map((lyric, index) => {\n          const timestamp = milliseconds[index]\n            ? `[${new Date(0, 0, 0, 0, 0, 0, milliseconds[index])\n              .toISOString()\n              .substring(14, 21)}] `\n            : '';\n          return (\n            <div\n              /* eslint-disable  react/no-array-index-key */\n              key={index}\n            >\n              {timestamp}\n              {lyric}\n            </div>\n          );\n        })}\n      </div>\n    </section>\n  );\n};\n","import { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport { Switch, Route } from 'react-router-dom';\nimport {\n  Directory,\n  KaraokeByShuffle,\n  KaraokeByVideoId,\n  SyncLyrics,\n} from './components';\nimport { useFetch } from './hooks';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nexport type MusicVideo = {\n  videoId: string;\n  songTitle: string;\n  songArtist: string;\n  cc?: boolean;\n};\n\nconst App = () => {\n  const { data } = useFetch('/sing-along/lyrics/index.json');\n  const songList: MusicVideo[] = data ? JSON.parse(data) : [];\n\n  // Shuffle list here since KaraokeByShuffle rerenders on each page load\n  const randomSongList = [...songList].sort(() => 0.5 - Math.random());\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={darkTheme}>\n        <Switch>\n          <Route path=\"/shuffle/:shuffleIndex\">\n            <KaraokeByShuffle songList={randomSongList} />\n          </Route>\n          <Route path=\"/:videoId/edit\">\n            <SyncLyrics />\n          </Route>\n          <Route path=\"/:videoId\">\n            <KaraokeByVideoId songList={songList} />\n          </Route>\n          <Route path=\"/\">\n            <Directory songList={songList} />\n          </Route>\n        </Switch>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useFetch = (url: string) => {\n  const [data, setData] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () =>\n      fetch(url)\n        .then((response) => response.text())\n        .then((result) => setData(result));\n\n    if (url) fetchData();\n  }, [url]);\n\n  return { data };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}