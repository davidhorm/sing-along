{"version":3,"sources":["components/Directory.tsx","hooks/useFetch.tsx","hooks/useYouTube.tsx","components/Karaoke.tsx","hooks/useDimensions.tsx","components/SyncLyrics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","label","flexDirection","minWidth","Directory","songList","setSelectedSong","classes","className","sort","a","b","lyricsFileName","localeCompare","map","songMetadata","replace","split","songTitle","artist","youtubeThumbnailSrc","videoId","Button","variant","onClick","src","alt","cc","useFetch","url","React","useState","data","setData","useEffect","fetch","then","response","text","result","fetchData","disableFullscreenOnIOS","includes","navigator","platform","userAgent","document","useYouTube","divId","videoWidth","videoHeight","milliseconds","setMilliseconds","youTubePlayer","setYouTubePlayer","timer","playerOptions","playerVars","cc_load_policy","iv_load_policy","playsinline","modestbranding","getYouTubePlayerOptions","player","YouTubePlayer","loadVideoById","startTimer","getCurrentTime","seconds","setInterval","value","stopTimer","clearInterval","listener","on","event","window","YT","PlayerState","PLAYING","PAUSED","ENDED","off","destroy","setSize","Karaoke","selectedSong","clientHeight","getElementsByTagName","dimensions","video","height","width","caption","useDimensions","lyricUrl","lrcData","lineRenderer","useCallback","lrcLine","active","content","id","lrc","currentTime","style","overflow","spaceTop","SyncLyrics","lyricLines","setLyricLines","youTubeTime","display","onChange","e","target","current","array","filter","_","index","length","paddingLeft","maxHeight","lyric","timestamp","Date","toISOString","substring","App","JSON","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yRAOMA,EAAYC,YAAW,CACzBC,MAAO,CACHC,cAAe,SACfC,SAAU,WAQLC,EAAY,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,gBAC3BC,EAAUR,IAEhB,OAAQ,qCACJ,wJACA,yBAASS,UAAU,YAAnB,SACKH,EACII,MAAK,SAACC,EAAiBC,GAAlB,OAAsCD,EAAEE,eAAeC,cAAcF,EAAEC,mBAC5EE,KAAI,SAACC,GAAgC,IAAD,EACLA,EAAaH,eAAeI,QAAQ,OAAQ,IAAIC,MAAM,OADjD,mBAC1BC,EAD0B,KACfC,EADe,KAE3BC,EAAmB,qCAAiCL,EAAaM,QAA9C,kBAEzB,OACI,eAACC,EAAA,EAAD,CACIC,QAAQ,WACRhB,QAAS,CAAEN,MAAOM,EAAQN,OAE1BuB,QAAS,kBAAMlB,EAAgBS,IAJnC,UAKI,qBAAKU,IAAKL,EAAqBM,IAAG,+BAA0BR,KAC5D,gCACKA,EADL,IACgB,uBADhB,IACwBC,EACnBJ,EAAaY,IAAM,cAAC,IAAD,CAA2BnB,UAAU,iBALxDO,EAAaM,kB,iCChCjCO,EAAW,SAACC,GAAiB,IAAD,EACbC,IAAMC,SAAS,IADF,mBAC9BC,EAD8B,KACxBC,EADwB,KAYrC,OATAH,IAAMI,WAAU,WAMZL,GALe,uCAAG,sBAAAnB,EAAA,+EACdyB,MAAMN,GACDO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIN,EAAQM,OAHd,2CAAH,oDAKRC,KACR,CAACX,IAEG,CAAEG,S,iBCMPS,EAAyB,SAACd,GAAD,OAAiBA,EAAK,EAhBjC,CAChB,iBACA,mBACA,iBACA,OACA,SACA,QACFe,SAASC,UAAUC,WAEbD,UAAUE,UAAUH,SAAS,QAAU,eAAgBI,SAOK,EAAI,GAkB3DC,EAAa,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,MAAO3B,EAAoE,EAApEA,QAAS4B,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,YAA+C,IAAlCvB,UAAkC,WAC5DG,IAAMC,SAAS,GAD6C,mBAC7FoB,EAD6F,KAC/EC,EAD+E,OAE1DtB,IAAMC,WAFoD,mBAE7FsB,EAF6F,KAE9EC,EAF8E,KAiDpG,OA7CAxB,IAAMI,WAAU,WACZ,IAMIqB,EANEC,EArBkB,SAAC7B,GAAD,MAA2B,CACvD8B,WAAY,CACRC,eAAgB,EAChBC,eAAgB,EAChBC,YAAanB,EAAuBd,GACpCkC,eAAgB,IAgBMC,CAAwBnC,GACxCoC,EAASC,IAAchB,GAAS3B,EAASmC,GAC/CO,EAAOE,cAAc5C,GAErBiC,EAAiBS,GAGjB,IAAMG,EAAU,uCAAG,4BAAAxD,EAAA,sEACOqD,EAAOI,iBADd,OACTC,EADS,OAEfhB,EAA0B,IAAVgB,GACE,IAClBb,EAAQc,aAAY,WAChBjB,GAAgB,SAAAkB,GAAK,OAAIA,EAFX,cAHH,2CAAH,qDASVC,EAAY,kBAAMC,cAAcjB,IAehCkB,EAAWV,EAAOW,GAAG,eAbD,SAACC,GAAgB,IAAD,EACFC,OAAeC,GAAGC,YAA9CC,EAD8B,EAC9BA,QAASC,EADqB,EACrBA,OAAQC,EADa,EACbA,MACzB,OAAQN,EAAM3C,MACV,KAAK+C,EACDb,IACA,MACJ,KAAKc,EACL,KAAKC,EACDV,QAOZ,OAAO,WACHA,IACCR,EAAemB,IAAIT,GACpBV,EAAOoB,aAEZ,CAACnC,EAAO3B,EAASA,IAEpBS,IAAMI,WAAU,WACZmB,GAAiBJ,GAAcC,GAAeG,EAAc+B,QAAQnC,EAAYC,KACjF,CAACG,EAAeJ,EAAYC,IAExB,CAAEC,iBC5EAkC,G,MAAU,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,aAAchF,EAAmC,EAAnCA,gBAAmC,ECX7C,WAEzB,IAAMiF,EAAezC,SAAS0C,qBAAqB,QAAQ,GAAGD,aAExDrC,EADmB,GACLqC,EAYpB,MAAO,CAAEE,WAVU,CACfC,MAAO,CACHC,OAAQzC,EACR0C,MAAO1C,EAAc,EAAI,IAE7B2C,QAAS,CACLF,OAAQJ,GAAgB,EATP,ODciBO,GAAlCL,WAAcC,EANgD,EAMhDA,MAAOG,EANyC,EAMzCA,QAEvBE,EAAYT,EAAa3D,GAA2D,GAAzE,6BAAyC2D,EAAa1E,gBACzDoF,EAAYpE,EAASmE,GAA3B/D,KAEAmB,EAAiBJ,EAAW,CAChC1B,QAASiE,EAAajE,QACtB4B,WAAYyC,EAAME,MAClB1C,YAAawC,EAAMC,OACnBhE,GAAI2D,EAAa3D,KAJbwB,aAOF8C,EAAenE,IAAMoE,aAAY,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAZ,OACnC,qBAAK5F,UAAY4F,EAAS,cAAgB,gBAA1C,SACKD,EAAQE,YAEf,IAEF,OACI,0BAAS7F,UAAU,UAAnB,UACI,wBAAQgB,QAAS,kBAAMlB,EAAgB,OAAvC,kBACA,qBAAKgG,GAAIhB,EAAajE,UACtB,cAAC,IAAD,CACIb,UAAU,MACV+F,IAAMjB,EAAa3D,GAAe,2BAAVqE,EACxBQ,YAAarD,EACb8C,aAAcA,EACdQ,MAAO,CAAEd,OAAO,QAAD,OAAUE,EAAQF,OAAlB,aAAqCe,SAAU,UAC9DC,SAAU,S,QEvCbC,EAAa,SAAC,GAAkC,IAAhCvF,EAA+B,EAA/BA,QAA+B,EAClBS,IAAMC,SAAmB,IADP,mBAChD8E,EADgD,KACpCC,EADoC,OAEdhF,IAAMC,SAAmB,IAFX,mBAEhDoB,EAFgD,KAElCC,EAFkC,KAGlC2D,EAAgBhE,EAAW,CAAC1B,YAA1C8B,aAER,OACI,0BAAS3C,UAAU,cAAciG,MAAO,CAACO,QAAS,QAAlD,UACI,gCACI,qBAAKV,GAAIjF,IAAe,uBACxB,0BAAU4F,SAAU,SAAAC,GAAC,OAAIJ,EAAcI,EAAEC,OAAO7C,MAAMrD,MAAM,UAAmB,uBAC/E,wBAAQO,QAAS,kBAAM4B,GAAiB,SAAAgE,GAAO,4BAASA,GAAT,CAAkBL,QAAjE,sBAAkG,uBAClG,wBAAQvF,QAAS,kBAAM4B,GAAiB,SAAAiE,GAAK,OAAIA,EAAMC,QAAO,SAACC,EAAGC,GAAJ,OAAcA,IAAUrE,EAAasE,OAAS,SAA5G,qBAGJ,qBAAKhB,MAAO,CAACiB,YAAa,MAAOC,UAAW,QAASjB,SAAU,QAA/D,SACKG,EAAW/F,KAAI,SAAC8G,EAAOJ,GACpB,IAAMK,EAAY1E,EAAaqE,GAAb,WAA0B,IAAIM,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG3E,EAAaqE,IAAQO,cAAcC,UAAU,GAAI,IAAtG,MAAgH,GAClI,OAAO,gCAAkBH,EAAWD,IAAnBJ,YCGtBS,EAjBH,WAAO,IAAD,EACwBnG,IAAMC,WAD9B,mBACTuD,EADS,KACKhF,EADL,KAER0B,EAASJ,EAAS,iCAAlBI,KACF3B,EAA2B2B,EAAOkG,KAAKC,MAAMnG,GAAQ,GAE3D,OACE,qBAAKxB,UAAU,MAAf,SACG8E,GAAgBA,EAAa1E,eAC1B,cAAC,EAAD,CAAS0E,aAAcA,EAAchF,gBAAiBA,IACtDgF,GAAgBA,EAAajE,QAC3B,cAAC,EAAD,CAAYA,QAASiE,EAAajE,UAClC,cAAC,EAAD,CAAWhB,SAAUA,EAAUC,gBAAiBA,OCN7C8H,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlG,MAAK,YAAkD,IAA/CmG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhG,SAASiG,eAAe,SAM1BX,M","file":"static/js/main.2f3ceab1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Directory.css';\r\nimport ClosedCaptionOutlinedIcon from '@material-ui/icons/ClosedCaptionOutlined';\r\nimport { SongMetadata } from '../App';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n    label: { \r\n        flexDirection: 'column',\r\n        minWidth: '420px'\r\n    },\r\n});\r\n\r\ntype DirectoryProps = {\r\n    songList: SongMetadata[];\r\n    setSelectedSong: Function;\r\n}\r\nexport const Directory = ({songList, setSelectedSong}: DirectoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <h1>🎄🎅🤶🎵 Christmas Sing Along 🎶☃️🎁🎄</h1>\r\n        <section className=\"directory\">\r\n            {songList\r\n                .sort((a: SongMetadata, b: SongMetadata) => a.lyricsFileName.localeCompare(b.lyricsFileName))\r\n                .map((songMetadata: SongMetadata) => {\r\n                    const [songTitle, artist] = songMetadata.lyricsFileName.replace('.lrc', '').split(' - ');\r\n                    const youtubeThumbnailSrc = `https://img.youtube.com/vi/${songMetadata.videoId}/mqdefault.jpg`;\r\n\r\n                    return (\r\n                        <Button \r\n                            variant=\"outlined\"\r\n                            classes={{ label: classes.label }}\r\n                            key={songMetadata.videoId}\r\n                            onClick={() => setSelectedSong(songMetadata)}>\r\n                            <img src={youtubeThumbnailSrc} alt={`Youtube Thumbnail of ${songTitle}`} />\r\n                            <div>\r\n                                {songTitle} <br /> {artist}\r\n                                {songMetadata.cc && <ClosedCaptionOutlinedIcon className=\"cc-icon\" />}\r\n                            </div>\r\n                        </Button>);\r\n                }\r\n            )}\r\n        </section>\r\n    </>);\r\n};","import React from 'react';\r\n\r\nexport const useFetch = (url: string) => {\r\n    const [data, setData] = React.useState('');\r\n\r\n    React.useEffect(() => {\r\n        const fetchData = async () => \r\n            fetch(url)\r\n                .then(response => response.text())\r\n                .then(result => setData(result));\r\n\r\n        url && fetchData();\r\n    }, [url]);\r\n\r\n    return { data };\r\n};","import React from 'react';\r\nimport YouTubePlayer from 'youtube-player';\r\nimport { Options, YouTubePlayer as YouTubePlayerType } from 'youtube-player/dist/types';\r\n\r\nconst isIOS = () => [\r\n    'iPad Simulator',\r\n    'iPhone Simulator',\r\n    'iPod Simulator',\r\n    'iPad',\r\n    'iPhone',\r\n    'iPod'\r\n].includes(navigator.platform)\r\n    // iPad on iOS 13 detection\r\n    || (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document);\r\n\r\n/**\r\n * \r\n * @param cc \r\n * @returns 0 = enable fullscreen; 1 = disable fullscreen\r\n */\r\nconst disableFullscreenOnIOS = (cc: boolean) => cc ? 0 : (isIOS() ? 1 : 0);\r\n\r\nconst getYouTubePlayerOptions = (cc: boolean): Options => ({\r\n    playerVars: {\r\n        cc_load_policy: 1, // show closed captions\r\n        iv_load_policy: 3, // remove video annotations\r\n        playsinline: disableFullscreenOnIOS(cc), // disable auto-fullscreen in iOS\r\n        modestbranding: 1, // remove YouTube icon in bottom corner\r\n    }\r\n});\r\n\r\ntype useYouTubeProps = {\r\n    divId?: string;\r\n    videoId: string;\r\n    videoWidth?: number;\r\n    videoHeight?: number;\r\n    cc?: boolean;\r\n}\r\nexport const useYouTube = ({ divId, videoId, videoWidth, videoHeight, cc = false }: useYouTubeProps) => {\r\n    const [milliseconds, setMilliseconds] = React.useState(0);\r\n    const [youTubePlayer, setYouTubePlayer] = React.useState<YouTubePlayerType>();\r\n\r\n    React.useEffect(() => {\r\n        const playerOptions = getYouTubePlayerOptions(cc);\r\n        const player = YouTubePlayer(divId || videoId, playerOptions);\r\n        player.loadVideoById(videoId);\r\n\r\n        setYouTubePlayer(player);\r\n\r\n        let timer: ReturnType<typeof setInterval>;\r\n        const startTimer = async () => {\r\n            const seconds = await player.getCurrentTime();\r\n            setMilliseconds(seconds * 1000);\r\n            const increment = 100; // ms // EXTRA CREDIT: adjust interval based on `player.getPlaybackRate()`.\r\n            timer = setInterval(() => {\r\n                setMilliseconds(value => value + increment)\r\n            }, increment);\r\n        };\r\n\r\n        const stopTimer = () => clearInterval(timer);\r\n\r\n        const handleStateChange = (event: any) => {\r\n            const { PLAYING, PAUSED, ENDED } = (window as any).YT.PlayerState;\r\n            switch (event.data) {\r\n                case PLAYING:\r\n                    startTimer();\r\n                    break;\r\n                case PAUSED:\r\n                case ENDED:\r\n                    stopTimer();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const listener = player.on('stateChange', handleStateChange);\r\n\r\n        return () => {\r\n            stopTimer();\r\n            (player as any).off(listener);\r\n            player.destroy();\r\n        };\r\n    }, [divId, videoId, videoId]); // videoWidth, videoHeight,\r\n\r\n    React.useEffect(() => {\r\n        youTubePlayer && videoWidth && videoHeight && youTubePlayer.setSize(videoWidth, videoHeight);\r\n    }, [youTubePlayer, videoWidth, videoHeight]);\r\n\r\n    return { milliseconds };\r\n}","import React from \"react\";\r\nimport { Lrc, LrcLine } from \"@mebtte/react-lrc\";\r\nimport { useDimensions, useFetch, useYouTube } from '../hooks';\r\nimport './Karaoke.css';\r\nimport { SongMetadata } from \"../App\";\r\n\r\ntype KaraokeProps = {\r\n    selectedSong: SongMetadata;\r\n    setSelectedSong: Function;\r\n}\r\n\r\nexport const Karaoke = ({selectedSong, setSelectedSong}: KaraokeProps) => {\r\n    interface ILrcLine {\r\n        lrcLine: LrcLine;\r\n        index: number;\r\n        active: boolean\r\n    }\r\n    const { dimensions: { video, caption }} = useDimensions();\r\n\r\n    const lyricUrl = !selectedSong.cc ? `/sing-along/lyrics/${selectedSong.lyricsFileName}` : '';\r\n    const { data: lrcData } = useFetch(lyricUrl);\r\n\r\n    const { milliseconds } = useYouTube({\r\n        videoId: selectedSong.videoId,\r\n        videoWidth: video.width,\r\n        videoHeight: video.height,\r\n        cc: selectedSong.cc,\r\n    });\r\n\r\n    const lineRenderer = React.useCallback(({ lrcLine, active}: ILrcLine) => \r\n        <div className={ active ? 'active-line' : 'inactive-line' }>\r\n            {lrcLine.content}\r\n        </div>\r\n    , []);\r\n\r\n    return (\r\n        <section className=\"karaoke\">\r\n            <button onClick={() => setSelectedSong(null)}>Back</button>\r\n            <div id={selectedSong.videoId} />\r\n            <Lrc \r\n                className='lrc'\r\n                lrc={!selectedSong.cc ? lrcData : '[00:00.0] [CC Available]'}\r\n                currentTime={milliseconds}\r\n                lineRenderer={lineRenderer}\r\n                style={{ height: `calc(${caption.height}px - 4em)`, overflow: 'hidden' }}\r\n                spaceTop={0}\r\n            />\r\n        </section>\r\n    );\r\n}","export const useDimensions = () => {\r\n    // EXTRA CREDIT: get fancy with reading video size ratio\r\n    const clientHeight = document.getElementsByTagName('html')[0].clientHeight;\r\n    const videoHeightRatio = 0.8;\r\n    const videoHeight = clientHeight * videoHeightRatio;\r\n\r\n    const dimensions = {\r\n        video: {\r\n            height: videoHeight,\r\n            width: videoHeight / 9 * 16,\r\n        },\r\n        caption: {\r\n            height: clientHeight * (1 - videoHeightRatio)\r\n        }\r\n    }\r\n\r\n    return { dimensions };\r\n};","import React from 'react';\r\nimport { useYouTube } from '../hooks';\r\n\r\ntype SyncLyricsProps = {\r\n    videoId: string;\r\n}\r\nexport const SyncLyrics = ({ videoId }: SyncLyricsProps) => {\r\n    const [ lyricLines, setLyricLines ] = React.useState<string[]>([]);\r\n    const [ milliseconds, setMilliseconds ] = React.useState<number[]>([]);\r\n    const { milliseconds: youTubeTime } = useYouTube({videoId});\r\n\r\n    return (\r\n        <section className=\"sync-lyrics\" style={{display: 'flex'}}>\r\n            <div>\r\n                <div id={videoId}></div><br />\r\n                <textarea onChange={e => setLyricLines(e.target.value.split('\\n'))}></textarea><br />\r\n                <button onClick={() => setMilliseconds( current => [ ...current, youTubeTime ])}>SET TIME</button><br />\r\n                <button onClick={() => setMilliseconds( array => array.filter((_, index) => index !== milliseconds.length - 1))}>UNDO</button>\r\n            </div>\r\n            \r\n            <div style={{paddingLeft: '1em', maxHeight: '100vh', overflow: 'auto'}}>\r\n                {lyricLines.map((lyric, index) => {\r\n                    const timestamp = milliseconds[index] ? `[${new Date(0, 0, 0, 0, 0, 0, milliseconds[index]).toISOString().substring(14, 21)}] ` : '';\r\n                    return <div key={index}>{timestamp}{lyric}</div>\r\n                })}\r\n            </div>\r\n        </section>\r\n    );\r\n};","import React from \"react\";\r\nimport { Directory, Karaoke, SyncLyrics } from './components';\r\nimport { useFetch } from './hooks';\r\n\r\nexport type SongMetadata = {\r\n  videoId: string;\r\n  lyricsFileName: string;\r\n  cc?: boolean;\r\n}\r\nconst App = () => {\r\n  const [selectedSong, setSelectedSong] = React.useState<SongMetadata>();\r\n  const { data } = useFetch('/sing-along/lyrics/index.json');\r\n  const songList: SongMetadata[] = data ? JSON.parse(data) : [];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {selectedSong && selectedSong.lyricsFileName\r\n        ? <Karaoke selectedSong={selectedSong} setSelectedSong={setSelectedSong} />\r\n        : selectedSong && selectedSong.videoId\r\n          ? <SyncLyrics videoId={selectedSong.videoId} />\r\n          : <Directory songList={songList} setSelectedSong={setSelectedSong} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}