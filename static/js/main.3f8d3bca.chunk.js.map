{"version":3,"sources":["components/Directory.tsx","hooks/useYouTube.tsx","components/Karaoke.tsx","hooks/useDimensions.tsx","components/SyncLyrics.tsx","App.tsx","hooks/useFetch.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","label","flexDirection","minWidth","Directory","songList","classes","className","sort","a","b","lyricsFileName","localeCompare","map","videoId","cc","replace","split","songTitle","artist","youtubeThumbnailSrc","ifNeedsEditPath","Button","variant","component","Link","to","src","alt","disableFullscreenOnIOS","includes","navigator","platform","userAgent","document","useYouTube","divId","videoWidth","videoHeight","useState","milliseconds","setMilliseconds","youTubePlayer","setYouTubePlayer","useEffect","timer","playerOptions","playerVars","cc_load_policy","iv_load_policy","playsinline","modestbranding","getYouTubePlayerOptions","player","YouTubePlayer","loadVideoById","startTimer","getCurrentTime","seconds","setInterval","value","stopTimer","clearInterval","listener","on","event","window","YT","PlayerState","PLAYING","PAUSED","ENDED","data","off","destroy","setSize","Karaoke","useParams","filter","song","lrcData","setLrcData","lyricUrl","fetch","then","response","text","getElementsByTagName","clientHeight","clientWidth","landscapeHeight","isWideEnough","video","height","width","dimensions","caption","useDimensions","lineRenderer","useCallback","lrcLine","active","content","id","lrc","currentTime","style","overflow","spaceTop","SyncLyrics","lyricLines","setLyricLines","youTubeTime","display","onChange","e","target","onClick","current","array","_","index","length","paddingLeft","maxHeight","lyric","timestamp","Date","toISOString","substring","App","url","setData","result","fetchData","useFetch","JSON","parse","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3f8d3bca.chunk.js","sourcesContent":["import './Directory.css';\r\nimport ClosedCaptionOutlinedIcon from '@material-ui/icons/ClosedCaptionOutlined';\r\nimport { SongMetadata } from '../App';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    label: { \r\n        flexDirection: 'column',\r\n        minWidth: '420px'\r\n    },\r\n});\r\n\r\ntype DirectoryProps = {\r\n    songList: SongMetadata[];\r\n}\r\nexport const Directory = ({songList}: DirectoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <h1>🎄🎅🤶🎵 Christmas Sing Along 🎶☃️🎁🎄</h1>\r\n        <section className=\"directory\">\r\n            {songList\r\n                .sort((a: SongMetadata, b: SongMetadata) => a.lyricsFileName.localeCompare(b.lyricsFileName))\r\n                .map(({ videoId, lyricsFileName, cc }: SongMetadata) => {\r\n                    const [songTitle, artist] = lyricsFileName.replace('.lrc', '').split(' - ');\r\n                    const youtubeThumbnailSrc = `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;\r\n\r\n                    const ifNeedsEditPath = lyricsFileName ? '' : '/edit';\r\n\r\n                    return (\r\n                        <Button \r\n                            variant=\"outlined\"\r\n                            classes={{ label: classes.label }}\r\n                            key={videoId}\r\n                            component={Link}\r\n                            to={`/${videoId}${ifNeedsEditPath}`}\r\n                            >\r\n                            <img src={youtubeThumbnailSrc} alt={`Youtube Thumbnail of ${songTitle}`} />\r\n                            <div>\r\n                                {songTitle} <br /> {artist}\r\n                                {cc && <ClosedCaptionOutlinedIcon className=\"cc-icon\" />}\r\n                            </div>\r\n                        </Button>);\r\n                }\r\n            )}\r\n        </section>\r\n    </>);\r\n};","import { useState, useEffect } from 'react';\r\nimport YouTubePlayer from 'youtube-player';\r\nimport { Options, YouTubePlayer as YouTubePlayerType } from 'youtube-player/dist/types';\r\n\r\nconst isIOS = () => [\r\n    'iPad Simulator',\r\n    'iPhone Simulator',\r\n    'iPod Simulator',\r\n    'iPad',\r\n    'iPhone',\r\n    'iPod'\r\n].includes(navigator.platform)\r\n    // iPad on iOS 13 detection\r\n    || (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document);\r\n\r\n/**\r\n * \r\n * @param cc \r\n * @returns 0 = enable fullscreen; 1 = disable fullscreen\r\n */\r\nconst disableFullscreenOnIOS = (cc: boolean) => cc ? 0 : (isIOS() ? 1 : 0);\r\n\r\nconst getYouTubePlayerOptions = (cc: boolean): Options => ({\r\n    playerVars: {\r\n        cc_load_policy: 1, // show closed captions\r\n        iv_load_policy: 3, // remove video annotations\r\n        playsinline: disableFullscreenOnIOS(cc), // disable auto-fullscreen in iOS\r\n        modestbranding: 1, // remove YouTube icon in bottom corner\r\n    }\r\n});\r\n\r\ntype useYouTubeProps = {\r\n    divId?: string;\r\n    videoId: string;\r\n    videoWidth?: number;\r\n    videoHeight?: number;\r\n    cc?: boolean;\r\n}\r\nexport const useYouTube = ({ divId, videoId, videoWidth, videoHeight, cc = false }: useYouTubeProps) => {\r\n    const [milliseconds, setMilliseconds] = useState(0);\r\n    const [youTubePlayer, setYouTubePlayer] = useState<YouTubePlayerType>();\r\n\r\n    useEffect(() => {\r\n        const playerOptions = getYouTubePlayerOptions(cc);\r\n        const player = YouTubePlayer(divId || videoId, playerOptions);\r\n        player.loadVideoById(videoId);\r\n\r\n        setYouTubePlayer(player);\r\n\r\n        let timer: ReturnType<typeof setInterval>;\r\n        const startTimer = async () => {\r\n            const seconds = await player.getCurrentTime();\r\n            setMilliseconds(seconds * 1000);\r\n            const increment = 100; // ms // EXTRA CREDIT: adjust interval based on `player.getPlaybackRate()`.\r\n            timer = setInterval(() => {\r\n                setMilliseconds(value => value + increment)\r\n            }, increment);\r\n        };\r\n\r\n        const stopTimer = () => clearInterval(timer);\r\n\r\n        const handleStateChange = (event: any) => {\r\n            const { PLAYING, PAUSED, ENDED } = (window as any).YT.PlayerState;\r\n            switch (event.data) {\r\n                case PLAYING:\r\n                    startTimer();\r\n                    break;\r\n                case PAUSED:\r\n                case ENDED:\r\n                    stopTimer();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const listener = player.on('stateChange', handleStateChange);\r\n\r\n        return () => {\r\n            stopTimer();\r\n            (player as any).off(listener);\r\n            player.destroy();\r\n        };\r\n    }, [divId, videoId, cc]);\r\n\r\n    useEffect(() => {\r\n        youTubePlayer && videoWidth && videoHeight && youTubePlayer.setSize(videoWidth, videoHeight);\r\n    }, [youTubePlayer, videoWidth, videoHeight]);\r\n\r\n    return { milliseconds };\r\n}","import { useCallback, useState, useEffect } from \"react\";\r\nimport { Lrc, LrcLine } from \"@mebtte/react-lrc\";\r\nimport { useDimensions, useYouTube } from '../hooks';\r\nimport './Karaoke.css';\r\nimport { SongMetadata } from \"../App\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    songList: SongMetadata[];\r\n}\r\nexport const Karaoke = ({ songList }: Props) => {\r\n    const { videoId } = useParams<any>();\r\n    const { lyricsFileName, cc } = songList.filter(song => song.videoId === videoId)[0] || {};\r\n    \r\n    const [lrcData, setLrcData] = useState('');\r\n    useEffect(() => {\r\n        const lyricUrl = !cc ? `/sing-along/lyrics/${lyricsFileName}` : '';\r\n        fetch(lyricUrl)\r\n            .then(response => response.text())\r\n            .then(setLrcData);\r\n    },[lyricsFileName, cc]);\r\n\r\n    const { dimensions: { video, caption }} = useDimensions();\r\n    const { milliseconds } = useYouTube({\r\n        videoId,\r\n        videoWidth: video.width,\r\n        videoHeight: video.height,\r\n        cc,\r\n    });\r\n\r\n    interface ILrcLine {\r\n        lrcLine: LrcLine;\r\n        index: number;\r\n        active: boolean\r\n    }\r\n    const lineRenderer = useCallback(({ lrcLine, active }: ILrcLine) => \r\n        <div className={ active ? 'active-line' : 'inactive-line' }>\r\n            {lrcLine.content}\r\n        </div>\r\n    , []);\r\n\r\n    return (\r\n        <section className=\"karaoke\">\r\n            <div id={videoId} />\r\n            <Lrc \r\n                className='lrc'\r\n                lrc={!cc ? lrcData : '[00:00.0] [CC Available]'}\r\n                currentTime={milliseconds}\r\n                lineRenderer={lineRenderer}\r\n                style={{ height: `calc(${caption.height}px - 4em)`, overflow: 'hidden' }}\r\n                spaceTop={0}\r\n            />\r\n        </section>\r\n    );\r\n}","export const useDimensions = () => {\r\n    const { clientHeight, clientWidth } = document.getElementsByTagName('html')[0];\r\n    \r\n    const landscapeHeightRatio = 0.8;\r\n    const landscapeHeight = clientHeight * landscapeHeightRatio;\r\n    const landscapeWidth = landscapeHeight * 16 / 9;\r\n    const isWideEnough = landscapeHeight < clientWidth;\r\n\r\n    const portraitWidth = clientWidth;\r\n    const portraitHeight = portraitWidth * 9 / 16;\r\n\r\n    const video = {\r\n        height: isWideEnough ? landscapeHeight : portraitHeight,\r\n        width: isWideEnough ? landscapeWidth : portraitWidth,\r\n    };\r\n\r\n    const dimensions = {\r\n        video,\r\n        caption: {\r\n            height: clientHeight - video.height,\r\n        }\r\n    }\r\n\r\n    return { dimensions };\r\n};","import { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useYouTube } from '../hooks';\r\n\r\nexport const SyncLyrics = () => {\r\n    const [ lyricLines, setLyricLines ] = useState<string[]>([]);\r\n    const [ milliseconds, setMilliseconds ] = useState<number[]>([]);\r\n    const { videoId } = useParams<any>();\r\n    const { milliseconds: youTubeTime } = useYouTube({videoId});\r\n\r\n    return (\r\n        <section className=\"sync-lyrics\" style={{display: 'flex'}}>\r\n            <div>\r\n                <div id={videoId}></div><br />\r\n                <textarea onChange={e => setLyricLines(e.target.value.split('\\n'))}></textarea><br />\r\n                <button onClick={() => setMilliseconds( current => [ ...current, youTubeTime ])}>SET TIME</button><br />\r\n                <button onClick={() => setMilliseconds( array => array.filter((_, index) => index !== milliseconds.length - 1))}>UNDO</button>\r\n            </div>\r\n            \r\n            <div style={{paddingLeft: '1em', maxHeight: '100vh', overflow: 'auto'}}>\r\n                {lyricLines.map((lyric, index) => {\r\n                    const timestamp = milliseconds[index] ? `[${new Date(0, 0, 0, 0, 0, 0, milliseconds[index]).toISOString().substring(14, 21)}] ` : '';\r\n                    return <div key={index}>{timestamp}{lyric}</div>\r\n                })}\r\n            </div>\r\n        </section>\r\n    );\r\n};","import { Directory, Karaoke, SyncLyrics } from './components';\r\nimport { useFetch } from './hooks';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nexport type SongMetadata = {\r\n  videoId: string;\r\n  lyricsFileName: string;\r\n  cc?: boolean;\r\n}\r\nconst App = () => {\r\n  const { data } = useFetch('/sing-along/lyrics/index.json');\r\n  const songList: SongMetadata[] = data ? JSON.parse(data) : [];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/:videoId/edit\">\r\n          <SyncLyrics />\r\n        </Route>\r\n        <Route path=\"/:videoId\">\r\n          <Karaoke songList={songList} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Directory songList={songList} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useFetch = (url: string) => {\r\n    const [data, setData] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => \r\n            fetch(url)\r\n                .then(response => response.text())\r\n                .then(result => setData(result));\r\n\r\n        url && fetchData();\r\n    }, [url]);\r\n\r\n    return { data };\r\n};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}