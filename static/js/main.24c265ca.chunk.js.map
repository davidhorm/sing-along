{"version":3,"sources":["components/Directory/ShuffleButton.tsx","components/Directory/Directory.tsx","hooks/useYouTube.tsx","components/Karaoke/Lyrics.tsx","components/Karaoke/Karaoke.tsx","components/Karaoke/useDimensions.tsx","components/KaraokeByShuffle/KaraokeByShuffle.tsx","components/KaraokeByVideoId/KaraokeByVideoId.tsx","components/SyncLyrics.tsx","App.tsx","hooks/useFetch.tsx","reportWebVitals.ts","index.tsx"],"names":["ShuffleButton","to","Button","size","variant","style","margin","endIcon","xmlns","width","height","viewBox","fill","d","useStyles","makeStyles","label","flexDirection","minWidth","card","maxWidth","cardMedia","cardTitle","fontSize","fontWeight","Directory","songList","classes","className","sort","a","b","songTitle","localeCompare","map","videoId","songArtist","cc","youtubeThumbnailSrc","youtubeThumbnailAlt","ifNeedsEditPath","Card","CardActionArea","CardMedia","component","alt","title","image","CardContent","Typography","gutterBottom","color","disableFullscreenOnIOS","includes","navigator","platform","userAgent","document","useYouTube","divId","videoWidth","videoHeight","onVideoEnd","useState","milliseconds","setMilliseconds","youTubePlayer","setYouTubePlayer","useEffect","timer","playerOptions","playerVars","cc_load_policy","iv_load_policy","playsinline","modestbranding","getYouTubePlayerOptions","player","YouTubePlayer","loadVideoById","startTimer","getCurrentTime","seconds","setInterval","value","stopTimer","clearInterval","listener","on","event","window","YT","PlayerState","PLAYING","PAUSED","ENDED","data","off","destroy","setSize","Lyrics","captionHeight","lrcData","setLrcData","lyricUrl","fetch","then","response","text","lineRenderer","useCallback","lrcLine","active","content","lrc","currentTime","overflow","spaceTop","Karaoke","getElementsByTagName","clientHeight","clientWidth","landscapeHeight","isWideEnough","video","dimensions","caption","useDimensions","id","KaraokeByShuffle","shuffleIndex","useParams","randomIndex","parseInt","length","song","history","useHistory","replace","KaraokeByVideoId","filter","SyncLyrics","lyricLines","setLyricLines","youTubeTime","display","border","onChange","e","target","split","onClick","current","array","_","index","paddingLeft","maxHeight","lyric","timestamp","Date","toISOString","substring","darkTheme","createMuiTheme","palette","type","App","url","setData","result","fetchData","useFetch","JSON","parse","randomSongList","Math","random","ThemeProvider","theme","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.24c265ca.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\nexport const ShuffleButton = () => (\n    <Link to='/shuffle/0'>\n        <Button\n            size=\"large\"\n            variant=\"outlined\"\n            style={{ margin: '0.5rem' }}\n            endIcon={(\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M17 17h-1.559l-9.7-10.673A1 1 0 0 0 5.001 6H2v2h2.559l4.09 4.5-4.09 4.501H2v2h3.001a1 1 0 0 0 .74-.327L10 13.987l4.259 4.686a1 1 0 0 0 .74.327H17v3l5-4-5-4v3z\"></path>\n                    <path fill=\"currentColor\" d=\"M15.441 8H17v3l5-3.938L17 3v3h-2.001a1 1 0 0 0-.74.327l-3.368 3.707 1.48 1.346L15.441 8z\"></path>\n                </svg>)}\n        >\n            Shuffle Play\n        </Button>\n    </Link>)","import './Directory.css';\nimport ClosedCaptionOutlinedIcon from '@material-ui/icons/ClosedCaptionOutlined';\nimport type { MusicVideo } from '../../App';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { ShuffleButton } from './ShuffleButton';\n\nconst useStyles = makeStyles({\n    label: {\n        flexDirection: 'column',\n        minWidth: '420px'\n    },\n    card: {\n        margin: 8,\n        maxWidth: 320,\n    },\n    cardMedia: {\n        height: 180,\n    },\n    cardTitle: {\n        fontSize: '1rem',\n        fontWeight: 500,\n    }\n});\n\ntype DirectoryProps = {\n    songList: MusicVideo[];\n}\nexport const Directory = ({ songList }: DirectoryProps) => {\n    const classes = useStyles();\n\n    return (<>\n        <h1>🎄🎅🤶🎵 Christmas Sing Along 🎶☃️🎁🎄</h1>\n        <nav><ShuffleButton /></nav>\n        <section className=\"directory\">\n            {songList\n                .sort((a: MusicVideo, b: MusicVideo) => a.songTitle.localeCompare(b.songTitle))\n                .map(({ videoId, songTitle, songArtist, cc }: MusicVideo) => {\n                    const youtubeThumbnailSrc = `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;\n                    const youtubeThumbnailAlt = `Youtube Thumbnail of ${songTitle}`;\n\n                    const ifNeedsEditPath = songTitle && songArtist ? '' : '/edit';\n\n                    return (\n                        <Card\n                            className={classes.card}\n                            key={videoId}\n                        >\n                            <Link to={`/${videoId}${ifNeedsEditPath}`}>\n                                <CardActionArea>\n                                    <CardMedia\n                                        className={classes.cardMedia}\n                                        component=\"img\"\n                                        alt={youtubeThumbnailAlt}\n                                        title={youtubeThumbnailAlt}\n                                        image={youtubeThumbnailSrc}\n                                    />\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.cardTitle}>\n                                            {songTitle}\n                                        </Typography>\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                            {songArtist}\n                                            {cc && <ClosedCaptionOutlinedIcon className=\"cc-icon\" />}\n                                        </Typography>\n                                    </CardContent>\n                                </CardActionArea>\n                            </Link>\n                        </Card>\n                    );\n                }\n                )}\n        </section>\n    </>);\n};","import { useState, useEffect } from 'react';\nimport YouTubePlayer from 'youtube-player';\nimport { Options, YouTubePlayer as YouTubePlayerType } from 'youtube-player/dist/types';\n\nconst isIOS = () => [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod'\n].includes(navigator.platform)\n    // iPad on iOS 13 detection\n    || (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document);\n\n/**\n * \n * @param cc \n * @returns 0 = enable fullscreen; 1 = disable fullscreen\n */\nconst disableFullscreenOnIOS = (cc: boolean) => cc ? 0 : (isIOS() ? 1 : 0);\n\nconst getYouTubePlayerOptions = (cc: boolean): Options => ({\n    playerVars: {\n        cc_load_policy: 1, // show closed captions\n        iv_load_policy: 3, // remove video annotations\n        playsinline: disableFullscreenOnIOS(cc), // disable auto-fullscreen in iOS\n        modestbranding: 1, // remove YouTube icon in bottom corner\n    }\n});\n\nexport interface useYouTubeProps {\n    divId?: string;\n    videoId: string;\n    videoWidth?: number;\n    videoHeight?: number;\n    cc?: boolean;\n    onVideoEnd?: Function;\n}\nexport const useYouTube = ({ divId, videoId, videoWidth, videoHeight, cc = false, onVideoEnd }: useYouTubeProps) => {\n    const [milliseconds, setMilliseconds] = useState(0);\n    const [youTubePlayer, setYouTubePlayer] = useState<YouTubePlayerType>();\n\n    useEffect(() => {\n        const playerOptions = getYouTubePlayerOptions(cc);\n        const player = YouTubePlayer(divId || videoId, playerOptions);\n        player.loadVideoById(videoId);\n\n        setYouTubePlayer(player);\n\n        let timer: ReturnType<typeof setInterval>;\n        const startTimer = async () => {\n            const seconds = await player.getCurrentTime();\n            setMilliseconds(seconds * 1000);\n            const increment = 100; // ms // EXTRA CREDIT: adjust interval based on `player.getPlaybackRate()`.\n            timer = setInterval(() => {\n                setMilliseconds(value => value + increment)\n            }, increment);\n        };\n\n        const stopTimer = () => clearInterval(timer);\n\n        const handleStateChange = (event: any) => {\n            const { PLAYING, PAUSED, ENDED } = (window as any).YT.PlayerState;\n            switch (event.data) {\n                case PLAYING:\n                    startTimer();\n                    break;\n                case PAUSED:\n                    stopTimer();\n                    break;\n                case ENDED:\n                    stopTimer();\n                    onVideoEnd && onVideoEnd();\n                    break;\n            }\n        };\n\n        const listener = player.on('stateChange', handleStateChange);\n\n        return () => {\n            stopTimer();\n            (player as any).off(listener);\n            player.destroy();\n        };\n    }, [divId, videoId, cc, onVideoEnd]);\n\n    useEffect(() => {\n        youTubePlayer && videoWidth && videoHeight && youTubePlayer.setSize(videoWidth, videoHeight);\n    }, [youTubePlayer, videoWidth, videoHeight]);\n\n    return { milliseconds };\n}","import { useCallback, useEffect, useState } from \"react\";\nimport { Lrc, LrcLine } from \"@mebtte/react-lrc\";\nimport type { MusicVideo } from '../../App';\n\ninterface LyricsProps extends Omit<MusicVideo, 'videoId'> {\n    captionHeight: number;\n    milliseconds: number;\n}\n\nexport const Lyrics = ({ milliseconds, captionHeight, songTitle, songArtist, cc }: LyricsProps) => {\n    const [lrcData, setLrcData] = useState('');\n    useEffect(() => {\n        const lyricUrl = !cc ? `/sing-along/lyrics/${songTitle} - ${songArtist}.lrc` : '';\n        fetch(lyricUrl)\n            .then(response => response.text())\n            .then(setLrcData);\n    }, [songTitle, songArtist, cc]);\n\n    interface ILrcLine {\n        lrcLine: LrcLine;\n        index: number;\n        active: boolean\n    }\n    const lineRenderer = useCallback(({ lrcLine, active }: ILrcLine) =>\n        <div className={active ? 'active-line' : 'inactive-line'}>\n            {lrcLine.content}\n        </div>\n        , []);\n\n    return <Lrc\n        className='lrc'\n        lrc={!cc ? lrcData : '[00:00.0] [CC Available]'}\n        currentTime={milliseconds}\n        lineRenderer={lineRenderer}\n        style={{ height: `calc(${captionHeight}px - 4em)`, overflow: 'hidden' }}\n        spaceTop={0}\n    />\n}","import { useYouTube, useYouTubeProps } from '../../hooks/useYouTube';\nimport { useDimensions } from './useDimensions';\nimport './Karaoke.css';\nimport { Lyrics } from './Lyrics';\nimport type { MusicVideo } from \"../../App\";\n\ninterface Props extends\n    MusicVideo,\n    Pick<useYouTubeProps, 'divId' | 'onVideoEnd'> { };\n\nexport const Karaoke = ({\n    divId,\n    videoId,\n    songTitle,\n    songArtist,\n    cc,\n    onVideoEnd,\n}: Props) => {\n    const { dimensions: { video, caption } } = useDimensions();\n\n    const { milliseconds } = useYouTube({\n        divId,\n        videoId,\n        videoWidth: video.width,\n        videoHeight: video.height,\n        cc,\n        onVideoEnd,\n    });\n\n    return (\n        <section className=\"karaoke\">\n            <div id={divId || videoId} />\n            <Lyrics\n                milliseconds={milliseconds}\n                captionHeight={caption.height}\n                songTitle={songTitle}\n                songArtist={songArtist}\n                cc={cc}\n            />\n        </section>\n    );\n}","export const useDimensions = () => {\n    const { clientHeight, clientWidth } = document.getElementsByTagName('html')[0];\n    \n    const landscapeHeightRatio = 0.8;\n    const landscapeHeight = clientHeight * landscapeHeightRatio;\n    const landscapeWidth = landscapeHeight * 16 / 9;\n    const isWideEnough = landscapeHeight < clientWidth;\n\n    const portraitWidth = clientWidth;\n    const portraitHeight = portraitWidth * 9 / 16;\n\n    const video = {\n        height: isWideEnough ? landscapeHeight : portraitHeight,\n        width: isWideEnough ? landscapeWidth : portraitWidth,\n    };\n\n    const dimensions = {\n        video,\n        caption: {\n            height: clientHeight - video.height,\n        }\n    }\n\n    return { dimensions };\n};","import type { MusicVideo } from \"../../App\";\nimport { Karaoke } from '../Karaoke/Karaoke';\nimport { useHistory, useParams } from 'react-router-dom';\n\ninterface KaraokeByShuffleProps {\n    songList: MusicVideo[];\n}\nexport const KaraokeByShuffle = ({ songList }: KaraokeByShuffleProps) => {\n    const { shuffleIndex } = useParams<any>();\n    const randomIndex = parseInt(shuffleIndex, 10) % songList.length;\n    const song = songList[randomIndex];\n\n    const history = useHistory();\n    const onVideoEnd = () => { history.replace(`/shuffle/${randomIndex + 1}`) };\n\n    return <Karaoke {...song} onVideoEnd={onVideoEnd} divId=\"video-player\" />\n}\n","import type { MusicVideo } from \"../../App\";\nimport { Karaoke } from '../Karaoke/Karaoke';\nimport { useParams } from 'react-router-dom';\n\ninterface KaraokeByVideoIdProps {\n    songList: MusicVideo[];\n}\nexport const KaraokeByVideoId = ({ songList }: KaraokeByVideoIdProps) => {\n    const { videoId } = useParams<any>();\n    const song = songList.filter(song => song.videoId === videoId)[0] || {};\n\n    return <Karaoke {...song} />\n}","import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { useYouTube } from '../hooks';\n\nexport const SyncLyrics = () => {\n    const [lyricLines, setLyricLines] = useState<string[]>([]);\n    const [milliseconds, setMilliseconds] = useState<number[]>([]);\n    const { videoId } = useParams<any>();\n    const { milliseconds: youTubeTime } = useYouTube({ videoId });\n\n    return (\n        <section className=\"sync-lyrics\" style={{ display: 'flex' }}>\n            <div>\n                <div id={videoId}></div><br />\n                <textarea style={{ border: 'solid 1px gray', height: '35%', width: '100%' }} onChange={e => setLyricLines(e.target.value.split('\\n'))}></textarea><br />\n                <Button variant=\"outlined\" onClick={() => setMilliseconds(current => [...current, youTubeTime])}>SET TIME</Button><br />\n                <Button variant=\"outlined\" onClick={() => setMilliseconds(array => array.filter((_, index) => index !== milliseconds.length - 1))}>UNDO</Button>\n            </div>\n\n            <div style={{ paddingLeft: '1em', maxHeight: '100vh', overflow: 'auto' }}>\n                {lyricLines.map((lyric, index) => {\n                    const timestamp = milliseconds[index] ? `[${new Date(0, 0, 0, 0, 0, 0, milliseconds[index]).toISOString().substring(14, 21)}] ` : '';\n                    return <div key={index}>{timestamp}{lyric}</div>\n                })}\n            </div>\n        </section>\n    );\n};","import { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport { Directory, KaraokeByShuffle, KaraokeByVideoId, SyncLyrics } from './components';\nimport { useFetch } from './hooks';\nimport { Switch, Route } from 'react-router-dom';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nexport type MusicVideo = {\n  videoId: string;\n  songTitle: string;\n  songArtist: string;\n  cc?: boolean;\n}\nconst App = () => {\n  const { data } = useFetch('/sing-along/lyrics/index.json');\n  const songList: MusicVideo[] = data ? JSON.parse(data) : [];\n\n  // Shuffle list here since KaraokeByShuffle rerenders on each page load\n  const randomSongList = [...songList].sort(() => 0.5 - Math.random())\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={darkTheme}>\n        <Switch>\n          <Route path=\"/shuffle/:shuffleIndex\">\n            <KaraokeByShuffle songList={randomSongList} />\n          </Route>\n          <Route path=\"/:videoId/edit\">\n            <SyncLyrics />\n          </Route>\n          <Route path=\"/:videoId\">\n            <KaraokeByVideoId songList={songList} />\n          </Route>\n          <Route path=\"/\">\n            <Directory songList={songList} />\n          </Route>\n        </Switch>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useFetch = (url: string) => {\n    const [data, setData] = useState('');\n\n    useEffect(() => {\n        const fetchData = async () => \n            fetch(url)\n                .then(response => response.text())\n                .then(result => setData(result));\n\n        url && fetchData();\n    }, [url]);\n\n    return { data };\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}